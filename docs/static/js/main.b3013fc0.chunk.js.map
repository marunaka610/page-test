{"version":3,"sources":["components/board.tsx","logic/rule.tsx","components/square_obj.tsx","components/square.tsx","view/game.tsx","app/header.tsx","app/footer.tsx","app/app.tsx","index.tsx"],"names":["Board","props","className","renderSquares","Setting","SquareState","Directions","row","column","enableSetPiece","p","squares","turn","isExistPiece","map","direction","enabelSetPieceImpl","reduce","acc","val","prePoint","isReverse","curPoint","curPiece","isSamePiece","turnOverPiece","cudrPiecies","forEach","result","turnOverPieceImpl","piecies","enableTurnOber","next","updatedPiecies","setPiece","SquareObj","state","this","piece","Square","classVal","logic","data-row","data-column","onClick","useGameState","side","enableView","i","col","j","isBlack","isWhite","changeGameState","Game","useState","setTurn","initPieces","r","c","push","setPiecies","func","param_pieces","e","getState","Header","Footer","App","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3013fc0.chunk.js","sourcesContent":["import React from 'react';\nimport './board.css';\n\ninterface Props {\n  renderSquares: () => JSX.Element[]\n}\n\nexport function Board(props : Props) {\n\n  return (\n    <div className='board'>\n      <table className='board-table'>\n        <tbody>{\n          props.renderSquares()\n        }</tbody>\n      </table>\n    </div>\n  );\n}\n","\nimport React from 'react';\nimport { SquareObj } from '../components/square_obj';\n\n/** 設定 */\nexport const Setting = {\n  BOARD_SIZE : 8\n};\n\n/** マスの状態 */\nexport const SquareState = {\n  None : 0,\n  Black : 1,\n  White : -1,\n  EnableSet : 2\n}\n\n/** 位置 */\nexport interface Position {\n  row : number,\n  column : number\n} \n\n/** 方向 */\nexport interface Direction {\n  row : number,\n  column : number\n}\n\n/** 方向一覧 */\nexport const Directions : Direction[]= [\n  {row:-1, column:0},\n  {row:-1, column:1},\n  {row:0, column:1},\n  {row:1, column:1},\n  {row:1, column:0},\n  {row:1, column:-1},\n  {row:0, column:-1},\n  {row:-1, column:-1},\n]\n\n\nexport function enableSetPiece(\n  p : Position\n  , squares : SquareObj[][]\n  , turn : number\n) : boolean {\n  const curPiece = squares[p.row][p.column];\n  if (curPiece.isExistPiece()) {\n    return false;\n  }\n\n  return Directions.map(direction => {\n    return enabelSetPieceImpl(\n      p\n      , direction\n      , false\n      , squares\n      , turn\n    );\n  }).reduce((acc: boolean, val: boolean) => {\n    return acc || val;\n  });\n}\n\nfunction enabelSetPieceImpl (\n  prePoint : Position\n  , direction : Direction\n  , isReverse : boolean\n  , squares : SquareObj[][]\n  , turn : number) : boolean {\n\n  const curPoint: Position = {\n    row : prePoint.row + direction.row,\n    column : prePoint.column + direction.column,\n  }\n\n  // 枠外\n  if (curPoint.row < 0 || curPoint.row >= Setting.BOARD_SIZE){\n    return false;\n  }\n  if (curPoint.column < 0 || curPoint.column >= Setting.BOARD_SIZE){\n    return false;\n  }\n\n  // 駒がない\n  const curPiece = squares[curPoint.row][curPoint.column];\n  if (!curPiece.isExistPiece()){\n    return false;\n  }\n  // 相手の色\n  else if (!curPiece.isSamePiece(turn)){\n    return enabelSetPieceImpl(\n      curPoint\n      , direction\n      , true\n      , squares\n      , turn\n    );\n  }\n  // 自分の色\n  else {\n    return isReverse;\n  }\n}\n\n/** 駒を返す処理 */\nexport function turnOverPiece(\n  p : Position\n  , squares : SquareObj[][]\n  , turn : number\n) : SquareObj[][] {\n  let cudrPiecies : SquareObj[][] = squares;\n  Directions.forEach(direction => {\n    const result = turnOverPieceImpl(\n      p\n      , direction\n      , false\n      , cudrPiecies\n      , turn\n    );\n    cudrPiecies = result.piecies;\n  });\n  return cudrPiecies;\n}\n\n/** 駒を返す処理実装の型 */\ninterface TurnOverPieceResult {\n  piecies: SquareObj[][]\n  , enableTurnOber: boolean\n}\n\n/** 駒を返す処理の実装 */\nfunction turnOverPieceImpl (\n  prePoint : Position\n  , direction : Direction\n  , isReverse : boolean\n  , piecies : SquareObj[][]\n  , turn : number) : TurnOverPieceResult {\n\n  const curPoint: Position = {\n    row : prePoint.row + direction.row,\n    column : prePoint.column + direction.column,\n  }\n\n  // 枠外\n  if (curPoint.row < 0 || curPoint.row >= Setting.BOARD_SIZE){\n    return { \n      piecies: piecies, \n      enableTurnOber: false\n    };\n  }\n  if (curPoint.column < 0 || curPoint.column >= Setting.BOARD_SIZE){\n    return { \n      piecies: piecies, \n      enableTurnOber: false\n    };\n  }\n\n  // 駒がない\n  const curPiece = piecies[curPoint.row][curPoint.column];\n  if (!curPiece.isExistPiece()){\n    return { \n      piecies: piecies, \n      enableTurnOber: false\n    };\n  }\n  // 相手の色\n  else if (!curPiece.isSamePiece(turn)){\n    const next = turnOverPieceImpl(\n      curPoint\n      , direction\n      , true\n      , piecies\n      , turn\n    );\n    if (next.enableTurnOber) {\n      let updatedPiecies = piecies;\n      updatedPiecies[curPoint.row][curPoint.column].setPiece(turn);\n      return { \n        piecies: updatedPiecies, \n        enableTurnOber: next.enableTurnOber\n      };\n    } else {\n      return { \n        piecies: piecies, \n        enableTurnOber: false\n      };\n    }\n  }\n  // 自分の色\n  else {\n    if (isReverse){\n      return { \n        piecies: piecies, \n        enableTurnOber: true\n      };\n    } else {\n      return { \n        piecies: piecies, \n        enableTurnOber: false\n      };\n    }\n  }\n}\n","\n\nimport {SquareState}  from 'logic/rule';\n\nexport class SquareObj {\n\n  state :number;\n\n  constructor(state: number) {\n    this.state = state;\n  }\n\n  getState() : number {\n    return this.state;\n  }\n\n  isBlack() : boolean {\n    return this.state === SquareState.Black;\n  }\n\n  isWhite() : boolean {\n    return this.state === SquareState.White;\n  }\n\n\n  isSamePiece(piece : number) : boolean {\n    return this.state === piece;\n  }\n\n  isExistPiece() : boolean {\n    return this.state === SquareState.Black || this.state === SquareState.White;\n  }\n\n  setPiece(piece : number){\n    this.state = piece\n  }\n\n}","// import React from 'react';\nimport React from 'react';\nimport * as logic from 'logic/rule';\nimport { SquareObj } from '../components/square_obj';\nimport './square.css'\n\ninterface Props {\n  /** 行番号 */\n  row: number;\n\n  /** 列番号 */\n  column: number;\n\n  /** 駒 */\n  piece: number\n\n  /** ゲームの状態を利用 */\n  useGameState: (func: (side: number, piecies: SquareObj[][]) => void) => void;\n\n  /** ゲームの状態を変更 */\n  changeGameState: (piecies: SquareObj[][]) => void;\n}\n\nexport function Square(props: Props) {\n\n  /** クリック時の駒配置制御 */\n  function onClick() {\n    props.useGameState((side: number, piecies: SquareObj[][]) => {\n      // 置けるか判定\n      if (logic.enableSetPiece(\n        {row : props.row, column : props.column}\n        , piecies\n        , side\n        )){\n        // 駒を置く\n        piecies[props.row][props.column].setPiece(side);\n        // 駒を返す\n        logic.turnOverPiece(\n          {row : props.row, column : props.column}\n          , piecies\n          , side\n        )\n        // 置ける場所を判定\n        const enableView = piecies.map((row, i) => {\n          return row.map((col, j) => {\n            if (col.isBlack() || col.isWhite()){\n              return col;\n            } else if (logic.enableSetPiece(\n              {row : i, column : j}\n              , piecies\n              , side === logic.SquareState.Black ? logic.SquareState.White : logic.SquareState.Black\n              )){\n                return new SquareObj(logic.SquareState.EnableSet);\n            } else {\n              return new SquareObj(logic.SquareState.None);\n            }\n          });\n        });\n\n\n        props.changeGameState(enableView);\n      }\n    });\n  }\n\n  /** ピースの見え方を定義 */\n  function showPiece() {\n    if (props.piece === logic.SquareState.Black) {\n      return (<p className='piece-black'></p>)\n    } else if (props.piece === logic.SquareState.White){\n        return (<p className='piece-white'></p>)\n    }\n  }\n\n  const classVal = 'square ' + (props.piece === logic.SquareState.EnableSet ? 'enable-set' : '');\n  return (\n    <td \n      key={ 'row' + props.row + '_col' + props.column}\n      className={classVal} \n      data-row={props.row} \n      data-column={props.column}\n      onClick={() => onClick()}\n    >{\n      showPiece()\n    }</td>\n  );\n}\n","import React, { useState } from 'react';\nimport { Board } from '../components/board'\nimport { SquareState, Setting } from 'logic/rule';\nimport { Square } from '../components/square';\nimport { SquareObj } from '../components/square_obj';\nimport './game.css'\n\nexport function Game() {\n\n  /** ターン */\n  const [turn, setTurn] = useState(SquareState.Black);\n\n  /** 駒の初期配置を作成 */\n  function initPieces() : SquareObj[][] {\n    let initPieces : SquareObj[][] = [];\n    for (let r = 0; r < Setting.BOARD_SIZE; r++) {\n      let row : SquareObj[] = [];\n      for (let c = 0; c < Setting.BOARD_SIZE; c++) {\n        if ((r === 3 && c === 4) || (r === 4 && c === 3)){\n          row.push(new SquareObj(SquareState.Black));\n        } else if ((r === 3 && c === 3) || (r === 4 && c === 4)){\n          row.push(new SquareObj(SquareState.White));\n        } else {\n          row.push(new SquareObj(SquareState.None));\n        }\n      }\n      initPieces.push(row);\n    }\n    return initPieces;\n  }\n\n  /** 駒の初期配置 */\n  const [piecies, setPiecies] = useState(initPieces());\n  \n  /** ゲームの状態を利用 */\n  function useGameState(func : (param_turn : number, param_piecies: SquareObj[][]) => void) {\n    func(turn, piecies);\n  }\n\n  /** ゲームの状態を更新 */\n  function changeGameState  (param_pieces: SquareObj[][]) {\n    setPiecies(param_pieces);\n    setTurn(turn * -1);\n  }\n\n  function renderSquares() { \n    return piecies.map((row, i) => {\n      return <tr>{\n        row.map((e, j) => {\n          return  <Square row={i} \n            column={j}\n            piece={e.getState()}\n            useGameState={useGameState} \n            changeGameState={changeGameState} \n            />\n        })\n      }</tr>\n    })\n  }\n\n  return (<div className='game'>\n    <Board \n      renderSquares={renderSquares} \n    />\n  </div>);\n}\n","import React from 'react';\n\nexport function Header() {\n  return (\n    <header>header</header>\n  );\n}\n","import React from 'react';\n\nexport function Footer() {\n  return (\n    <footer>footer</footer>\n  );\n}\n","import React from 'react';\nimport { Game } from '../view/game';\nimport { Header } from './header';\nimport { Footer } from './footer';\n\nexport function App() {\n    return (\n      <div id='content' >\n        <Header />\n        <Game />\n        <br />\n        <Footer />\n      </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app/app';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n);"],"sourceRoot":""}