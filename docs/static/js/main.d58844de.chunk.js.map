{"version":3,"sources":["components/board.tsx","logic/rule.tsx","components/square.tsx","view/game.tsx","app/header.tsx","app/footer.tsx","app/app.tsx","index.tsx"],"names":["Board","props","className","renderSquares","Setting","Side","prop","state","this","row","column","Square","useState","piece","setPiece","data-row","data-column","onClick","useGameState","side","piecies","newSide","changeGameState","Game","turn","setTurn","initPieces","r","c","push","setPiecies","func","param_pieces","map","i","e","j","Header","React","Component","Footer","App","id","ReactDOM","render","document","getElementById"],"mappings":"qPAOO,SAASA,EAAMC,GAEpB,OACE,qBAAKC,UAAU,QAAf,SACE,uBAAOA,UAAU,cAAjB,SACE,gCACED,EAAME,sB,WCXHC,EACE,EAGFC,EACJ,EADIA,EAEH,EAFGA,GAGF,EAcJ,IATL,WAAYC,GAAY,yBADxBC,WACuB,EACrBC,KAAKD,MAAQ,CACXE,IAAMH,EAAKG,IACXC,OAASJ,EAAKI,QAMb,CAAW,CAACD,KAAK,EAAGC,OAAO,I,YCD3B,SAASC,EAAOV,GAAc,MAGTW,mBAASX,EAAMY,OAHN,mBAG5BA,EAH4B,KAGrBC,EAHqB,KAwBnC,OACE,oBAEEZ,UAAU,SACVa,WAAUd,EAAMQ,IAChBO,cAAaf,EAAMS,OACnBO,QAAS,WAvBXhB,EAAMiB,cAAa,SAACC,EAAcC,GAChC,IAAIC,EAAUF,EACdC,EAAQnB,EAAMQ,KAAKR,EAAMS,QAAUS,EACnClB,EAAMqB,gBAAgBF,GACtBN,EAAWO,OAcb,SARIR,IAAUR,EACJ,mBAAGH,UAAU,gBACZW,IAAUR,EACT,mBAAGH,UAAU,qBADlB,GAOC,MAAQD,EAAMQ,IAAM,OAASR,EAAMS,QCjCxC,SAASa,EAAKtB,GAAe,MAGVW,mBAASP,GAHC,mBAG3BmB,EAH2B,KAGrBC,EAHqB,WAyBJb,mBAnB9B,WAEE,IADA,IAAIc,EAA0B,GACrBC,EAAI,EAAGA,EAAIvB,EAAoBuB,IAAK,CAE3C,IADA,IAAIlB,EAAiB,GACZmB,EAAI,EAAGA,EAAIxB,EAAoBwB,IAC3B,IAAND,GAAiB,IAANC,GAAmB,IAAND,GAAiB,IAANC,EACtCnB,EAAIoB,KAAKxB,GACO,IAANsB,GAAiB,IAANC,GAAmB,IAAND,GAAiB,IAANC,EAC7CnB,EAAIoB,KAAKxB,GAETI,EAAIoB,KAAKxB,GAGbqB,EAAWG,KAAKpB,GAElB,OAAOiB,EAI8BA,IAzBL,mBAyB3BN,EAzB2B,KAyBlBU,EAzBkB,KA2BlC,SAASZ,EAAaa,GAClBA,EAAKP,EAAMJ,GAIf,SAASE,EAAkBU,GACvBF,EAAWE,GACXP,GAAgB,EAARD,GAoBV,OAAQ,qBAAKtB,UAAU,OAAf,SACN,cAACF,EAAD,CACEG,cAjBG,kBAAMiB,EAAQa,KAAI,SAACxB,EAAKyB,GAC7B,OAAO,6BACLzB,EAAIwB,KAAI,SAACE,EAAGC,GACV,OAAQ,cAACzB,EAAD,CAAQF,IAAKyB,EACnBxB,OAAQ0B,EACRvB,MAAOsB,EACPjB,aAAcA,EACdI,gBAAiBA,iB,yBC1DRe,E,uKAIjB,OACE,gD,GAL8BC,IAAMC,WCCrBC,E,uKAIjB,OACE,gD,GAL8BF,IAAMC,WCKnC,SAASE,IAEZ,OACE,sBAAKC,GAAG,UAAR,UACE,cAAC,EAAD,IACA,cAACnB,EAAD,IACA,uBACA,cAAC,EAAD,O,MCXRoB,IAASC,OACP,cAACH,EAAD,IACAI,SAASC,eAAe,U","file":"static/js/main.d58844de.chunk.js","sourcesContent":["import React from 'react';\nimport './board.css';\n\ninterface Props {\n  renderSquares: () => JSX.Element[]\n}\n\nexport function Board(props : Props) {\n\n  return (\n    <div className='board'>\n      <table className='board-table'>\n        <tbody>{\n          props.renderSquares()\n        }</tbody>\n      </table>\n    </div>\n  );\n \n}\n","import { Square } from '../components/square';\n\nexport const Setting = {\n  BOARD_SIZE : 8\n};\n\nexport const Side = {\n  None : 0,\n  Black : 1,\n  White : -1\n}\n\nclass Vector {\n  state : any;\n  constructor(prop : any){\n    this.state = {\n      row : prop.row,\n      column : prop.column\n    }\n  }\n}\n\nexport const Direction = {\n  Up : new Vector({row:-1, column:0}),\n  UpRight : [-1, 1],\n  Right : [0, 1],\n  DownRight : [1, 1],\n  Down : [1, 0],\n  DownLeft : [1, -1],\n  Left : [0, -1],\n  UpLeft : [-1, -1],\n}\n\nexport class Position {\n  state : any;\n  constructor(prop : any){\n    this.state = {\n      row : prop.row,\n      column : prop.column\n    }\n  }\n}\n\nexport function enableSetPiece(p : Position, squares : number[][]){\n  Object.keys(Direction).forEach(element => {\n    return enabelSetPieceImpl(p, 1, false, squares);\n  });\n}\nfunction enabelSetPieceImpl(prePoint : Position\n  , offset : number\n  , isReverse : boolean\n  , squares : number[][]){\n\n    const curPoint = new Position({\n      row : prePoint.state.row,\n      column : prePoint.state.column,\n    })\n    // if ()\n\n}\n\n","// import React from 'react';\nimport React, { useState } from 'react';\nimport { Side } from 'logic/rule';\nimport './square.css'\n\ninterface Props{\n  /** 行番号 */\n  row: number;\n\n  /** 列番号 */\n  column: number;\n\n  /** 駒の初期値 */\n  piece: number\n\n  /** ゲームの状態を利用 */\n  useGameState: (func: (side: number, piecies: number[][]) => void) => void;\n\n  /** ゲームの状態を変更 */\n  changeGameState: (piecies: number[][]) => void;\n}\n\nexport function Square(props: Props) {\n\n  /** 駒 */\n  const [piece, setPiece] = useState(props.piece);\n\n  /** クリック時の駒配置制御 */\n  function onClick() {\n    props.useGameState((side: number, piecies: number[][]) => {\n      let newSide = side; \n      piecies[props.row][props.column] = side;\n      props.changeGameState(piecies);\n      setPiece ( newSide );\n    });\n  }\n\n  /** ピースの見え方を定義 */\n  function showPiece() {\n    if (piece === Side.Black) {\n      return (<p className='piece-black'></p>)\n    } else if (piece === Side.White){\n        return (<p className='piece-white'></p>)\n    }\n  }\n\n  return (\n    <td \n      key={ 'row' + props.row + '_col' + props.column}\n      className='square' \n      data-row={props.row} \n      data-column={props.column}\n      onClick={() => onClick()}\n    >{\n      showPiece()\n    }</td>\n  );\n}\n","// import React from 'react';\nimport { Board } from '../components/board'\nimport { Side, Setting } from 'logic/rule';\nimport './game.css'\nimport { Square } from '../components/square';\nimport React, { useState } from 'react';\n\ninterface Props {\n}\n\ninterface State {\n  turn?:number, \n  pieces?: number[][]\n}\n\nexport function Game(props : Props) {\n\n  /** ターン */\n  const [turn, setTurn] = useState(Side.Black);\n\n  /** 駒の初期配置を作成 */\n  function initPieces() : number[][] {\n    let initPieces : number[][] = [];\n    for (let r = 0; r < Setting.BOARD_SIZE; r++) {\n      let row : number[] = [];\n      for (let c = 0; c < Setting.BOARD_SIZE; c++) {\n        if ((r === 3 && c === 3) || (r === 4 && c === 4)){\n          row.push(Side.Black);\n        } else if ((r === 4 && c === 3) || (r === 3 && c === 4)){\n          row.push(Side.White);\n        } else {\n          row.push(Side.None);\n        }\n      }\n      initPieces.push(row);\n    }\n    return initPieces;\n  }\n\n  /** 駒の初期配置 */\n  const [piecies, setPiecies] = useState(initPieces());\n  \n  function useGameState(func : (param_turn : number, param_piecies: number[][]) => void) {\n      func(turn, piecies)\n    \n  }\n\n  function changeGameState  (param_pieces: number[][]) {\n      setPiecies(param_pieces);\n      setTurn(turn * -1);\n    }\n  \n\n  function renderSquares() {\n    return () => piecies.map((row, i) => {\n      return <tr>{\n        row.map((e, j) => {\n          return  <Square row={i} \n            column={j}\n            piece={e}\n            useGameState={useGameState} \n            changeGameState={changeGameState} \n            />\n        })\n      }</tr>\n    })\n  }\n\n  \n    return (<div className='game'>\n      <Board \n        renderSquares={renderSquares()} \n      />\n    </div>);\n}\n","import React from 'react';\n\n\nexport default class Header extends React.Component {\n  // constructor(props : any){\n  // }\n  render() {\n    return (\n      <header>header</header>\n    );\n  }\n}\n","import React from 'react';\n\n\n\nexport default class Footer extends React.Component {\n  // constructor(props : any){\n  // }\n  render() {\n    return (\n      <footer>footer</footer>\n    );\n  }\n}\n","import React from 'react';\nimport {Game} from '../view/game';\nimport Header from './header';\nimport Footer from './footer';\n\ninterface Props {\n}\n\n\nexport function App() {\n\n    return (\n      <div id='content' >\n        <Header />\n        <Game />\n        <br />\n        <Footer />\n      </div>\n\n    );\n  \n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app/app';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n);"],"sourceRoot":""}