{"version":3,"sources":["components/board.tsx","logic/rule.tsx","components/square.tsx","components/square_obj.tsx","view/game.tsx","app/header.tsx","app/footer.tsx","app/app.tsx","index.tsx"],"names":["Board","props","className","renderSquares","Setting","SquareState","Directions","row","column","getEnemyTurn","myTurn","enableSetPiece","p","squares","turn","isExistPiece","map","direction","enabelSetPieceImpl","reduce","acc","val","prePoint","isReverse","curPoint","curPiece","isSamePiece","turnOverPiece","cudrPiecies","forEach","result","turnOverPieceImpl","piecies","enableTurnOber","next","updatedPiecies","setPiece","Square","classVal","piece","logic","data-row","data-column","onClick","isEnd","useGameState","side","updated","changeGameState","SquareObj","state","this","Game","useState","setTurn","setEnd","initPieces","r","c","push","setPiecies","func","paramPieces","console","log","nextEnable","i","sqr","j","countState","s","isEnableSet","next2Enable","isState","accAll","accRow","e","getState","countBlack","isBlack","countWhite","isWhite","showTurn","Header","Footer","App","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a083cda3.chunk.js","sourcesContent":["import React from 'react';\nimport './board.css';\n\ninterface Props {\n  renderSquares: () => JSX.Element[]\n}\n\nexport function Board(props : Props) {\n\n  return (\n    <div className='board'>\n      <table className='board-table'>\n        <tbody>{\n          props.renderSquares()\n        }</tbody>\n      </table>\n    </div>\n  );\n}\n","\nimport { SquareObj } from '../components/square_obj';\n\n/** 設定 */\nexport const Setting = {\n  BOARD_SIZE : 8\n};\n\n/** マスの状態 */\nexport const SquareState = {\n  None : 0,\n  Black : 1,\n  White : -1,\n  EnableSet : 2\n}\n\n/** 位置 */\nexport interface Position {\n  row : number,\n  column : number\n} \n\n/** 方向 */\nexport interface Direction {\n  row : number,\n  column : number\n}\n\n/** 方向一覧 */\nexport const Directions : Direction[]= [\n  {row:-1, column:0},\n  {row:-1, column:1},\n  {row:0, column:1},\n  {row:1, column:1},\n  {row:1, column:0},\n  {row:1, column:-1},\n  {row:0, column:-1},\n  {row:-1, column:-1},\n]\n\n/**\n * 相手のターンを取得\n * @param myTurn 自分のターン\n */\nexport function getEnemyTurn(myTurn : number){\n  return myTurn === SquareState.Black ? SquareState.White : SquareState.Black;\n}\n\nexport function enableSetPiece(\n  p : Position\n  , squares : SquareObj[][]\n  , turn : number\n) : boolean {\n  const curPiece = squares[p.row][p.column];\n  if (curPiece.isExistPiece()) {\n    return false;\n  }\n\n  return Directions.map(direction => {\n    return enabelSetPieceImpl(\n      p\n      , direction\n      , false\n      , squares\n      , turn\n    );\n  }).reduce((acc: boolean, val: boolean) => {\n    return acc || val;\n  });\n}\n\nfunction enabelSetPieceImpl (\n  prePoint : Position\n  , direction : Direction\n  , isReverse : boolean\n  , squares : SquareObj[][]\n  , turn : number) : boolean {\n\n  const curPoint: Position = {\n    row : prePoint.row + direction.row,\n    column : prePoint.column + direction.column,\n  }\n\n  // 枠外\n  if (curPoint.row < 0 || curPoint.row >= Setting.BOARD_SIZE){\n    return false;\n  }\n  if (curPoint.column < 0 || curPoint.column >= Setting.BOARD_SIZE){\n    return false;\n  }\n\n  // 駒がない\n  const curPiece = squares[curPoint.row][curPoint.column];\n  if (!curPiece.isExistPiece()){\n    return false;\n  }\n  // 相手の色\n  else if (!curPiece.isSamePiece(turn)){\n    return enabelSetPieceImpl(\n      curPoint\n      , direction\n      , true\n      , squares\n      , turn\n    );\n  }\n  // 自分の色\n  else {\n    return isReverse;\n  }\n}\n\n/** 駒を返す処理 */\nexport function turnOverPiece(\n  p : Position\n  , squares : SquareObj[][]\n  , turn : number\n) : SquareObj[][] {\n  let cudrPiecies : SquareObj[][] = squares;\n  Directions.forEach(direction => {\n    const result = turnOverPieceImpl(\n      p\n      , direction\n      , false\n      , cudrPiecies\n      , turn\n    );\n    cudrPiecies = result.piecies;\n  });\n  return cudrPiecies;\n}\n\n/** 駒を返す処理実装の型 */\ninterface TurnOverPieceResult {\n  piecies: SquareObj[][]\n  , enableTurnOber: boolean\n}\n\n/** 駒を返す処理の実装 */\nfunction turnOverPieceImpl (\n  prePoint : Position\n  , direction : Direction\n  , isReverse : boolean\n  , piecies : SquareObj[][]\n  , turn : number) : TurnOverPieceResult {\n\n  const curPoint: Position = {\n    row : prePoint.row + direction.row,\n    column : prePoint.column + direction.column,\n  }\n\n  // 枠外\n  if (curPoint.row < 0 || curPoint.row >= Setting.BOARD_SIZE){\n    return { \n      piecies: piecies, \n      enableTurnOber: false\n    };\n  }\n  if (curPoint.column < 0 || curPoint.column >= Setting.BOARD_SIZE){\n    return { \n      piecies: piecies, \n      enableTurnOber: false\n    };\n  }\n\n  // 駒がない\n  const curPiece = piecies[curPoint.row][curPoint.column];\n  if (!curPiece.isExistPiece()){\n    return { \n      piecies: piecies, \n      enableTurnOber: false\n    };\n  }\n  // 相手の色\n  else if (!curPiece.isSamePiece(turn)){\n    const next = turnOverPieceImpl(\n      curPoint\n      , direction\n      , true\n      , piecies\n      , turn\n    );\n    if (next.enableTurnOber) {\n      let updatedPiecies = piecies;\n      updatedPiecies[curPoint.row][curPoint.column].setPiece(turn);\n      return { \n        piecies: updatedPiecies, \n        enableTurnOber: next.enableTurnOber\n      };\n    } else {\n      return { \n        piecies: piecies, \n        enableTurnOber: false\n      };\n    }\n  }\n  // 自分の色\n  else {\n    if (isReverse){\n      return { \n        piecies: piecies, \n        enableTurnOber: true\n      };\n    } else {\n      return { \n        piecies: piecies, \n        enableTurnOber: false\n      };\n    }\n  }\n}\n","// import React from 'react';\nimport React from 'react';\nimport * as logic from 'logic/rule';\nimport { SquareObj } from '../components/square_obj';\nimport './square.css'\n\ninterface Props {\n  /** 行番号 */\n  row: number;\n\n  /** 列番号 */\n  column: number;\n\n  /** 駒 */\n  piece: number\n\n  /** ゲームの状態を利用 */\n  useGameState: (func: (side: number, piecies: SquareObj[][]) => void) => void;\n\n  /** ゲームの状態を変更 */\n  changeGameState: (piecies: SquareObj[][]) => void;\n\n  /** ゲーム終了判定 */\n  isEnd: boolean;\n}\n\nexport function Square(props: Props) {\n\n  /** クリック時の駒配置制御 */\n  function onClick() {\n\n    if (props.isEnd) return;\n    \n\n    props.useGameState((side: number, piecies: SquareObj[][]) => {\n      // 置けるか判定\n      if (logic.enableSetPiece(\n        {row : props.row, column : props.column}\n        , piecies\n        , side\n        )){\n        // 駒を置く\n        piecies[props.row][props.column].setPiece(side);\n        // 駒を返す\n        const updated = logic.turnOverPiece(\n          {row : props.row, column : props.column}\n          , piecies\n          , side\n        )\n\n        props.changeGameState(updated);\n      }\n    });\n  }\n\n  /** ピースの見え方を定義 */\n  function showPiece() {\n    if (props.piece === logic.SquareState.Black) {\n      return (<p className='piece-black'></p>)\n    } else if (props.piece === logic.SquareState.White){\n        return (<p className='piece-white'></p>)\n    }\n  }\n\n  const classVal = 'square ' + (props.piece === logic.SquareState.EnableSet ? 'enable-set' : '');\n  return (\n    <td \n      key={ 'row' + props.row + '_col' + props.column}\n      className={classVal} \n      data-row={props.row} \n      data-column={props.column}\n      onClick={() => onClick()}\n    >{\n      showPiece()\n    }</td>\n  );\n}\n\n","\n\nimport {SquareState}  from 'logic/rule';\n\nexport class SquareObj {\n\n  state :number;\n\n  constructor(state: number) {\n    this.state = state;\n  }\n\n  getState() : number {\n    return this.state;\n  }\n\n  isBlack() : boolean {\n    return this.state === SquareState.Black;\n  }\n\n  isWhite() : boolean {\n    return this.state === SquareState.White;\n  }\n  isEnableSet() : boolean {\n    return this.state === SquareState.EnableSet;\n  }\n\n  isSamePiece(piece : number) : boolean {\n    return this.state === piece;\n  }\n\n  isExistPiece() : boolean {\n    return this.state === SquareState.Black || this.state === SquareState.White;\n  }\n\n  setPiece(piece : number){\n    this.state = piece\n  }\n\n}","import React, { useState } from 'react';\nimport { Board } from '../components/board'\nimport { SquareState, Setting } from 'logic/rule';\nimport { Square } from '../components/square';\nimport { SquareObj } from '../components/square_obj';\nimport * as logic from 'logic/rule';\nimport './game.css'\n\nexport function Game() {\n\n  /** ターン */\n  const [turn, setTurn] = useState(SquareState.Black);\n\n  /** ゲーム終了判定 */\n  const [isEnd, setEnd] = useState(false);\n\n  /** 駒の初期配置を作成 */\n  function initPieces(): SquareObj[][] {\n    let initPieces: SquareObj[][] = [];\n    for (let r = 0; r < Setting.BOARD_SIZE; r++) {\n      let row: SquareObj[] = [];\n      for (let c = 0; c < Setting.BOARD_SIZE; c++) {\n        if ((r === 3 && c === 4) || (r === 4 && c === 3)) {\n          row.push(new SquareObj(SquareState.Black));\n        } else if ((r === 3 && c === 3) || (r === 4 && c === 4)) {\n          row.push(new SquareObj(SquareState.White));\n        } else {\n          row.push(new SquareObj(SquareState.None));\n        }\n      }\n      initPieces.push(row);\n    }\n    return initPieces;\n  }\n\n  /** 駒の初期配置 */\n  const [piecies, setPiecies] = useState(initPieces());\n\n  /** ゲームの状態を利用 */\n  function useGameState(func: (param_turn: number, param_piecies: SquareObj[][]) => void) {\n    func(turn, piecies);\n  }\n\n  /** ゲームの状態を更新 */\n  function changeGameState(paramPieces: SquareObj[][]) {\n\n    console.log('enemy turn:' + logic.getEnemyTurn(turn))\n    // 次のターンで置ける場所を判定\n    const nextEnable = paramPieces.map((row, i) => {\n      return row.map((sqr, j) => {\n        if (sqr.isExistPiece()) {\n          return sqr;\n        } else if (logic.enableSetPiece(\n          { row: i, column: j }\n          , piecies\n          , logic.getEnemyTurn(turn)\n        )) {\n          sqr.setPiece(SquareState.EnableSet);\n          return sqr;\n        } else {\n          sqr.setPiece(SquareState.None);\n          return sqr;\n        }\n      });\n    });\n\n    // 次ターンに置く場所がある場合\n    if (countState(nextEnable, s => s.isEnableSet()) > 0) {\n      setPiecies(nextEnable);\n      setTurn(logic.getEnemyTurn(turn));\n      return;\n    }\n\n\n    // 更に次のターンで置ける場所を判定\n    const next2Enable = paramPieces.map((row, i) => {\n      return row.map((sqr, j) => {\n        if (sqr.isExistPiece()) {\n          return sqr;\n        } else if (logic.enableSetPiece(\n          { row: i, column: j }\n          , piecies\n          , turn\n        )) {\n          sqr.setPiece(SquareState.EnableSet);\n          return sqr;\n        } else {\n          sqr.setPiece(SquareState.None);\n          return sqr;\n        }\n      });\n    });\n\n    // 更に次ターンに置く場所がある場合\n    if (countState(next2Enable, s => s.isEnableSet()) > 0) {\n      setPiecies(next2Enable);\n      return;\n    }\n\n    setEnd(true);\n\n  }\n\n\n  function countState(squares: SquareObj[][]\n    , isState: (square:SquareObj) => boolean\n  ) : number {\n      return squares.reduce((accAll, row) => {\n        return accAll + row.reduce((accRow, sqr) => {\n          return accRow + (isState(sqr) ? 1 : 0);\n        }, 0)\n      }, 0)\n  }\n\n\n  function renderSquares() {\n    return piecies.map((row, i) => {\n      return <tr>{\n        row.map((e, j) => {\n          return <Square \n            row={i}\n            column={j}\n            piece={e.getState()}\n            useGameState={useGameState}\n            changeGameState={changeGameState}\n            isEnd={isEnd}\n          />\n        })\n      }</tr>\n    })\n  }\n\n  function showTurn() {\n\n    if (isEnd){\n      const countBlack = countState(piecies, s => s.isBlack());\n      const countWhite = countState(piecies, s => s.isWhite());\n      if (countBlack > countWhite) return 'Black Win';\n      if (countBlack < countWhite) return 'White Win';\n      return 'Draw'\n    }\n\n    if (turn === SquareState.Black) {\n      return 'Turn is Black';\n    } else if (turn === SquareState.White) {\n      return 'Turn is White';\n    }\n  }\n\n  return (<div className='game'>\n    <Board\n      renderSquares={renderSquares}\n    />\n    <div>{showTurn()}</div>\n  </div>);\n}\n","import React from 'react';\n\nexport function Header() {\n  return (\n    <header>\n      <h1>Reversi Game</h1>\n    </header>\n  );\n}\n","import React from 'react';\n\nexport function Footer() {\n  return (\n    <footer>\n      <h4>by Marunaka610</h4>\n    </footer>\n  );\n}\n","import React from 'react';\nimport { Game } from '../view/game';\nimport { Header } from './header';\nimport { Footer } from './footer';\n\nexport function App() {\n    return (\n      <div id='content' >\n        <Header />\n        <Game />\n        <br />\n        <Footer />\n      </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app/app';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n);"],"sourceRoot":""}